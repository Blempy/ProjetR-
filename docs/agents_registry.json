[
  {
    "slug": "architecture-fonctionnelle-du-projet",
    "title": "Architecture fonctionnelle du projet",
    "phase": "Avant-projet (AVP)",
    "priority": "Haute",
    "status": "À lancer",
    "responsable": "Responsable projet / Dev Python",
    "frequency": "À chaque nouveau plan",
    "duration": "0.5 à 2h par tâche",
    "source": "refs/fiches_taches/2025-10-27-architecture-fonctionnelle-du-projet.md",
    "body": "# Agent Architecture fonctionnelle du projet\n\n- **Phase** : Avant-projet (AVP)\n- **Fiche source** : `refs/fiches_taches/2025-10-27-architecture-fonctionnelle-du-projet.md`\n- **Priorité** : Haute\n- **Statut** : À lancer\n- **Responsable initial** : Responsable projet / Dev Python\n- **Fréquence** : À chaque nouveau plan\n- **Durée estimée** : 0.5 à 2h par tâche\n\n## Mission\n- **Objectif principal** : Définir les blocs fonctionnels, les interactions entre modules et les flux de données du Projet R.\n- **Déclencheurs connus** :\n  - Lancement d’un nouveau projet ou réception de données sources\n\n## Workflow cible\n1. Identification des blocs fonctionnels (moteur métier, connecteurs, interface, etc.)\n2. Cartographie des interactions entre blocs\n3. Production d’un schéma et documentation associée\n\n## Entrées à mobiliser\n- **Données** :\n  - Fichiers DWG / DXF\n  - Configuration charte / paramètres projet\n- **Documents de référence** :\n  - Charte graphique BE\n- **Logiciels / outils** :\n  - AutoCAD, Python, Librairie interne Projet R\n\n## Sorties attendues\n- **Livrables** :\n  - Diagramme fonctionnel\n  - Documentation structurée (.md)\n- **Formats** :\n  - DWG, PDF, Excel, JSON\n- **Destinataires / diffusion** :\n  - Équipe projet, archivage automatique\n\n## Points de douleur à traiter\n- Tâche répétitive et chronophage\n- Risque d’erreur humaine sur les noms/calques\n\n## Idées d'automatisation\n- **Pistes actuelles** :\n  - Script Python de renommage automatique\n  - Vérification par rapport à un fichier de référence\n- **Type envisagé** : Automatisation locale\n- **Pré-requis** : Plan DWG propre et configuration BE\n- **Niveau d'effort** : Moyen\n- **Bénéfices attendus** :\n  - Gain de temps\n  - Standardisation et fiabilité\n\n## Interactions et dépendances\n- Synchronise la cartographie fonctionnelle avec l’agent Gestion de Projet & Versionning.\n- Diffuse les schémas via l’agent Coordination & Communication.\n\n## Questions ouvertes\n- Définir les niveaux de détail attendus (macro vs micro) dans les schémas.\n- Identifier les outils de modélisation privilégiés (Mermaid, Draw.io, etc.).\n\n## Actions prioritaires\n- Développement du module\n\n## Documents liés\n- config.json\n- charte_graphique.json\n"
  },
  {
    "slug": "calculs-vrd",
    "title": "Calculs VRD",
    "phase": "Avant-projet (AVP)",
    "priority": "Haute",
    "status": "À lancer",
    "responsable": "Responsable projet / Dev Python",
    "frequency": "À chaque nouveau plan",
    "duration": "0.5 à 2h par tâche",
    "source": "refs/fiches_taches/2025-10-27-calculs-vrd.md",
    "body": "# Agent Calculs VRD\n\n- **Phase** : Avant-projet (AVP)\n- **Fiche source** : `refs/fiches_taches/2025-10-27-calculs-vrd.md`\n- **Priorité** : Haute\n- **Statut** : À lancer\n- **Responsable initial** : Responsable projet / Dev Python\n- **Fréquence** : À chaque nouveau plan\n- **Durée estimée** : 0.5 à 2h par tâche\n\n## Mission\n- **Objectif principal** : Calculer surfaces, longueurs, volumes de terrassement, pentes et métrés.\n- **Déclencheurs connus** :\n  - Lancement d’un nouveau projet ou réception de données sources\n\n## Workflow cible\n1. Analyse des objets AutoCAD\n2. Calculs par catégorie (surface, volume, longueur)\n3. Export des résultats\n\n## Entrées à mobiliser\n- **Données** :\n  - Fichiers DWG / DXF\n  - Configuration charte / paramètres projet\n- **Documents de référence** :\n  - Charte graphique BE\n- **Logiciels / outils** :\n  - AutoCAD, Python, Librairie interne Projet R\n\n## Sorties attendues\n- **Livrables** :\n  - Tableaux Excel des quantités\n  - Fichiers JSON structurés\n- **Formats** :\n  - DWG, PDF, Excel, JSON\n- **Destinataires / diffusion** :\n  - Équipe projet, archivage automatique\n\n## Points de douleur à traiter\n- Tâche répétitive et chronophage\n- Risque d’erreur humaine sur les noms/calques\n\n## Idées d'automatisation\n- **Pistes actuelles** :\n  - Script Python de renommage automatique\n  - Vérification par rapport à un fichier de référence\n- **Type envisagé** : Automatisation locale\n- **Pré-requis** : Plan DWG propre et configuration BE\n- **Niveau d'effort** : Moyen\n- **Bénéfices attendus** :\n  - Gain de temps\n  - Standardisation et fiabilité\n\n## Interactions et dépendances\n- À préciser (revoir avec l’agent de dispatch).\n\n## Questions ouvertes\n- À préciser avec Blempy lors du cadrage détaillé.\n- Définir les indicateurs de succès pour cet agent.\n\n## Actions prioritaires\n- Développement du module\n\n## Documents liés\n- config.json\n- charte_graphique.json\n"
  },
  {
    "slug": "compte-rendu-de-reunion",
    "title": "Compte rendu de réunion",
    "phase": "PRO / EXE",
    "priority": "Haute",
    "status": "À lancer",
    "responsable": "Responsable projet / Dev Python",
    "frequency": "À chaque nouveau plan",
    "duration": "0.5 à 2h par tâche",
    "source": "refs/fiches_taches/2025-10-27-compte-rendu-de-reunion.md",
    "body": "# Agent Compte rendu de réunion\n\n- **Phase** : PRO / EXE\n- **Fiche source** : `refs/fiches_taches/2025-10-27-compte-rendu-de-reunion.md`\n- **Priorité** : Haute\n- **Statut** : À lancer\n- **Responsable initial** : Responsable projet / Dev Python\n- **Fréquence** : À chaque nouveau plan\n- **Durée estimée** : 0.5 à 2h par tâche\n\n## Mission\n- **Objectif principal** : Générer automatiquement les comptes rendus à partir des échanges ou notes audio/texte.\n- **Déclencheurs connus** :\n  - Lancement d’un nouveau projet ou réception de données sources\n\n## Workflow cible\n1. Transcription des échanges (manuelle ou IA)\n2. Structuration en CR normalisé\n3. Archivage et diffusion\n\n## Entrées à mobiliser\n- **Données** :\n  - Fichiers DWG / DXF\n  - Configuration charte / paramètres projet\n- **Documents de référence** :\n  - Charte graphique BE\n- **Logiciels / outils** :\n  - AutoCAD, Python, Librairie interne Projet R\n\n## Sorties attendues\n- **Livrables** :\n  - Compte rendu PDF\n  - Journal des décisions\n- **Formats** :\n  - DWG, PDF, Excel, JSON\n- **Destinataires / diffusion** :\n  - Équipe projet, archivage automatique\n\n## Points de douleur à traiter\n- Tâche répétitive et chronophage\n- Risque d’erreur humaine sur les noms/calques\n\n## Idées d'automatisation\n- **Pistes actuelles** :\n  - Script Python de renommage automatique\n  - Vérification par rapport à un fichier de référence\n- **Type envisagé** : Automatisation locale\n- **Pré-requis** : Plan DWG propre et configuration BE\n- **Niveau d'effort** : Moyen\n- **Bénéfices attendus** :\n  - Gain de temps\n  - Standardisation et fiabilité\n\n## Interactions et dépendances\n- S’appuie sur les notes collectées par l’agent Coordination.\n- Diffuse les comptes rendus via l’agent Reporting & Livrables.\n\n## Questions ouvertes\n- Savoir si des enregistrements audio sont disponibles.\n- Définir la structure standard du compte rendu souhaité.\n\n## Actions prioritaires\n- Développement du module\n\n## Documents liés\n- config.json\n- charte_graphique.json\n"
  },
  {
    "slug": "coordination-et-communication",
    "title": "Coordination et communication",
    "phase": "EXE",
    "priority": "Haute",
    "status": "À lancer",
    "responsable": "Responsable projet / Dev Python",
    "frequency": "À chaque nouveau plan",
    "duration": "0.5 à 2h par tâche",
    "source": "refs/fiches_taches/2025-10-27-coordination-et-communication.md",
    "body": "# Agent Coordination et communication\n\n- **Phase** : EXE\n- **Fiche source** : `refs/fiches_taches/2025-10-27-coordination-et-communication.md`\n- **Priorité** : Haute\n- **Statut** : À lancer\n- **Responsable initial** : Responsable projet / Dev Python\n- **Fréquence** : À chaque nouveau plan\n- **Durée estimée** : 0.5 à 2h par tâche\n\n## Mission\n- **Objectif principal** : Faciliter l’échange entre les membres du projet via des outils numériques.\n- **Déclencheurs connus** :\n  - Lancement d’un nouveau projet ou réception de données sources\n\n## Workflow cible\n1. Partage automatique des livrables\n2. Centralisation des échanges par canal\n3. Historisation des commentaires\n\n## Entrées à mobiliser\n- **Données** :\n  - Fichiers DWG / DXF\n  - Configuration charte / paramètres projet\n- **Documents de référence** :\n  - Charte graphique BE\n- **Logiciels / outils** :\n  - AutoCAD, Python, Librairie interne Projet R\n\n## Sorties attendues\n- **Livrables** :\n  - Journal de communication\n  - Historique des échanges\n- **Formats** :\n  - DWG, PDF, Excel, JSON\n- **Destinataires / diffusion** :\n  - Équipe projet, archivage automatique\n\n## Points de douleur à traiter\n- Tâche répétitive et chronophage\n- Risque d’erreur humaine sur les noms/calques\n\n## Idées d'automatisation\n- **Pistes actuelles** :\n  - Script Python de renommage automatique\n  - Vérification par rapport à un fichier de référence\n- **Type envisagé** : Automatisation locale\n- **Pré-requis** : Plan DWG propre et configuration BE\n- **Niveau d'effort** : Moyen\n- **Bénéfices attendus** :\n  - Gain de temps\n  - Standardisation et fiabilité\n\n## Interactions et dépendances\n- Partage les plans d’action avec l’agent Gestion de Projet.\n- Déclenche des alertes via l’agent Pilotage à distance.\n\n## Questions ouvertes\n- Identifier les canaux de communication privilégiés (mail, Teams, Slack).\n- Définir les indicateurs de suivi à afficher.\n\n## Actions prioritaires\n- Développement du module\n\n## Documents liés\n- config.json\n- charte_graphique.json\n"
  },
  {
    "slug": "cout-et-budgetisation-automatique",
    "title": "Coût et budgétisation automatique",
    "phase": "PRO / DCE",
    "priority": "Haute",
    "status": "À lancer",
    "responsable": "Responsable projet / Dev Python",
    "frequency": "À chaque nouveau plan",
    "duration": "0.5 à 2h par tâche",
    "source": "refs/fiches_taches/2025-10-27-cout-et-budgetisation-automatique.md",
    "body": "# Agent Coût et budgétisation automatique\n\n- **Phase** : PRO / DCE\n- **Fiche source** : `refs/fiches_taches/2025-10-27-cout-et-budgetisation-automatique.md`\n- **Priorité** : Haute\n- **Statut** : À lancer\n- **Responsable initial** : Responsable projet / Dev Python\n- **Fréquence** : À chaque nouveau plan\n- **Durée estimée** : 0.5 à 2h par tâche\n\n## Mission\n- **Objectif principal** : Estimer automatiquement les coûts des travaux à partir des métrés et ratios.\n- **Déclencheurs connus** :\n  - Lancement d’un nouveau projet ou réception de données sources\n\n## Workflow cible\n1. Récupération des quantités\n2. Application des prix unitaires du bordereau\n3. Calcul du budget global\n\n## Entrées à mobiliser\n- **Données** :\n  - Fichiers DWG / DXF\n  - Configuration charte / paramètres projet\n- **Documents de référence** :\n  - Charte graphique BE\n- **Logiciels / outils** :\n  - AutoCAD, Python, Librairie interne Projet R\n\n## Sorties attendues\n- **Livrables** :\n  - Bordereau estimatif\n  - Synthèse économique\n- **Formats** :\n  - DWG, PDF, Excel, JSON\n- **Destinataires / diffusion** :\n  - Équipe projet, archivage automatique\n\n## Points de douleur à traiter\n- Tâche répétitive et chronophage\n- Risque d’erreur humaine sur les noms/calques\n\n## Idées d'automatisation\n- **Pistes actuelles** :\n  - Script Python de renommage automatique\n  - Vérification par rapport à un fichier de référence\n- **Type envisagé** : Automatisation locale\n- **Pré-requis** : Plan DWG propre et configuration BE\n- **Niveau d'effort** : Moyen\n- **Bénéfices attendus** :\n  - Gain de temps\n  - Standardisation et fiabilité\n\n## Interactions et dépendances\n- Utilise les quantités fournies par l’agent Calculs VRD.\n- Transmet les estimations à l’agent Reporting & Livrables.\n\n## Questions ouvertes\n- Confirmer la structure de la base de prix à exploiter.\n- Préciser les validations humaines nécessaires avant diffusion.\n\n## Actions prioritaires\n- Développement du module\n\n## Documents liés\n- config.json\n- charte_graphique.json\n"
  },
  {
    "slug": "definition-du-besoin-cahier-des-charges",
    "title": "Définition du besoin / Cahier des charges",
    "phase": "Avant-projet (AVP)",
    "priority": "Haute",
    "status": "À lancer",
    "responsable": "Responsable projet / Dev Python",
    "frequency": "À chaque nouveau plan",
    "duration": "0.5 à 2h par tâche",
    "source": "refs/fiches_taches/2025-10-27-definition-du-besoin-cahier-des-charges.md",
    "body": "# Agent Définition du besoin / Cahier des charges\n\n- **Phase** : Avant-projet (AVP)\n- **Fiche source** : `refs/fiches_taches/2025-10-27-definition-du-besoin-cahier-des-charges.md`\n- **Priorité** : Haute\n- **Statut** : À lancer\n- **Responsable initial** : Responsable projet / Dev Python\n- **Fréquence** : À chaque nouveau plan\n- **Durée estimée** : 0.5 à 2h par tâche\n\n## Mission\n- **Objectif principal** : Formaliser les attentes, objectifs, périmètre et valeur ajoutée du Projet R pour cadrer le développement.\n- **Déclencheurs connus** :\n  - Lancement d’un nouveau projet ou réception de données sources\n\n## Workflow cible\n1. Identification des problèmes à résoudre en bureau d’études VRD\n2. Formulation des cas d’usage principaux\n3. Rédaction d’un cahier des charges initial\n\n## Entrées à mobiliser\n- **Données** :\n  - Fichiers DWG / DXF\n  - Configuration charte / paramètres projet\n- **Documents de référence** :\n  - Charte graphique BE\n- **Logiciels / outils** :\n  - AutoCAD, Python, Librairie interne Projet R\n\n## Sorties attendues\n- **Livrables** :\n  - Fiche de synthèse .md\n  - Cahier des charges v1\n- **Formats** :\n  - DWG, PDF, Excel, JSON\n- **Destinataires / diffusion** :\n  - Équipe projet, archivage automatique\n\n## Points de douleur à traiter\n- Tâche répétitive et chronophage\n- Risque d’erreur humaine sur les noms/calques\n\n## Idées d'automatisation\n- **Pistes actuelles** :\n  - Script Python de renommage automatique\n  - Vérification par rapport à un fichier de référence\n- **Type envisagé** : Automatisation locale\n- **Pré-requis** : Plan DWG propre et configuration BE\n- **Niveau d'effort** : Moyen\n- **Bénéfices attendus** :\n  - Gain de temps\n  - Standardisation et fiabilité\n\n## Interactions et dépendances\n- Collecte les besoins clarifiés par l’agent d’accueil/clarification.\n- Remet le cahier final à l’agent Reporting & Livrables.\n\n## Questions ouvertes\n- Lister les informations minimales à collecter auprès du MOA.\n- Déterminer les formats de restitution attendus (Word, Markdown, Excel).\n\n## Actions prioritaires\n- Développement du module\n\n## Documents liés\n- config.json\n- charte_graphique.json\n"
  },
  {
    "slug": "generation-de-rapports-et-livrables",
    "title": "Génération de rapports et livrables",
    "phase": "PRO / DCE",
    "priority": "Haute",
    "status": "À lancer",
    "responsable": "Responsable projet / Dev Python",
    "frequency": "À chaque nouveau plan",
    "duration": "0.5 à 2h par tâche",
    "source": "refs/fiches_taches/2025-10-27-generation-de-rapports-et-livrables.md",
    "body": "# Agent Génération de rapports et livrables\n\n- **Phase** : PRO / DCE\n- **Fiche source** : `refs/fiches_taches/2025-10-27-generation-de-rapports-et-livrables.md`\n- **Priorité** : Haute\n- **Statut** : À lancer\n- **Responsable initial** : Responsable projet / Dev Python\n- **Fréquence** : À chaque nouveau plan\n- **Durée estimée** : 0.5 à 2h par tâche\n\n## Mission\n- **Objectif principal** : Créer automatiquement les documents finaux : métrés, rapports d’audit, plans annotés.\n- **Déclencheurs connus** :\n  - Lancement d’un nouveau projet ou réception de données sources\n\n## Workflow cible\n1. Collecte des résultats depuis les modules précédents\n2. Mise en page automatique des livrables\n3. Export en PDF, Excel, DWG annoté\n\n## Entrées à mobiliser\n- **Données** :\n  - Fichiers DWG / DXF\n  - Configuration charte / paramètres projet\n- **Documents de référence** :\n  - Charte graphique BE\n- **Logiciels / outils** :\n  - AutoCAD, Python, Librairie interne Projet R\n\n## Sorties attendues\n- **Livrables** :\n  - Rapports PDF\n  - Tableaux Excel\n  - Plans annotés\n- **Formats** :\n  - DWG, PDF, Excel, JSON\n- **Destinataires / diffusion** :\n  - Équipe projet, archivage automatique\n\n## Points de douleur à traiter\n- Tâche répétitive et chronophage\n- Risque d’erreur humaine sur les noms/calques\n\n## Idées d'automatisation\n- **Pistes actuelles** :\n  - Script Python de renommage automatique\n  - Vérification par rapport à un fichier de référence\n- **Type envisagé** : Automatisation locale\n- **Pré-requis** : Plan DWG propre et configuration BE\n- **Niveau d'effort** : Moyen\n- **Bénéfices attendus** :\n  - Gain de temps\n  - Standardisation et fiabilité\n\n## Interactions et dépendances\n- Assemble les productions des agents Budgétisation, Notes de calcul, Coordination.\n- Sollicite l’agent Charte Graphique pour le contrôle visuel.\n\n## Questions ouvertes\n- Recenser les gabarits Word/PDF existants.\n- Définir les règles de nommage des livrables finaux.\n\n## Actions prioritaires\n- Développement du module\n\n## Documents liés\n- config.json\n- charte_graphique.json\n"
  },
  {
    "slug": "gestion-de-projet-et-versionning",
    "title": "Gestion de projet et versionning",
    "phase": "Toutes phases",
    "priority": "Haute",
    "status": "À lancer",
    "responsable": "Responsable projet / Dev Python",
    "frequency": "À chaque nouveau plan",
    "duration": "0.5 à 2h par tâche",
    "source": "refs/fiches_taches/2025-10-27-gestion-de-projet-et-versionning.md",
    "body": "# Agent Gestion de projet et versionning\n\n- **Phase** : Toutes phases\n- **Fiche source** : `refs/fiches_taches/2025-10-27-gestion-de-projet-et-versionning.md`\n- **Priorité** : Haute\n- **Statut** : À lancer\n- **Responsable initial** : Responsable projet / Dev Python\n- **Fréquence** : À chaque nouveau plan\n- **Durée estimée** : 0.5 à 2h par tâche\n\n## Mission\n- **Objectif principal** : Suivre l’évolution du projet, archiver les versions, tracer les actions automatiques.\n- **Déclencheurs connus** :\n  - Lancement d’un nouveau projet ou réception de données sources\n\n## Workflow cible\n1. Initialisation du projet (config.json, dossiers, logs)\n2. Suivi des versions et des livrables générés\n3. Archivage automatique des livrables\n\n## Entrées à mobiliser\n- **Données** :\n  - Fichiers DWG / DXF\n  - Configuration charte / paramètres projet\n- **Documents de référence** :\n  - Charte graphique BE\n- **Logiciels / outils** :\n  - AutoCAD, Python, Librairie interne Projet R\n\n## Sorties attendues\n- **Livrables** :\n  - Fichiers de logs\n  - Historique des versions\n  - Structure de projet normalisée\n- **Formats** :\n  - DWG, PDF, Excel, JSON\n- **Destinataires / diffusion** :\n  - Équipe projet, archivage automatique\n\n## Points de douleur à traiter\n- Tâche répétitive et chronophage\n- Risque d’erreur humaine sur les noms/calques\n\n## Idées d'automatisation\n- **Pistes actuelles** :\n  - Script Python de renommage automatique\n  - Vérification par rapport à un fichier de référence\n- **Type envisagé** : Automatisation locale\n- **Pré-requis** : Plan DWG propre et configuration BE\n- **Niveau d'effort** : Moyen\n- **Bénéfices attendus** :\n  - Gain de temps\n  - Standardisation et fiabilité\n\n## Interactions et dépendances\n- Assure la traçabilité des livrables de tous les agents spécialisés.\n- Déclenche des rappels via l’agent Pilotage à distance (Slack/Webhook).\n\n## Questions ouvertes\n- Choisir les outils cibles (Git, Notion, GanttProject…).\n- Clarifier la fréquence de synchronisation attendue.\n\n## Actions prioritaires\n- Développement du module\n\n## Documents liés\n- config.json\n- charte_graphique.json\n"
  },
  {
    "slug": "gestion-des-donnees-de-terrain",
    "title": "Gestion des données de terrain",
    "phase": "Avant-projet (AVP)",
    "priority": "Haute",
    "status": "À lancer",
    "responsable": "Responsable projet / Dev Python",
    "frequency": "À chaque nouveau plan",
    "duration": "0.5 à 2h par tâche",
    "source": "refs/fiches_taches/2025-10-27-gestion-des-donnees-de-terrain.md",
    "body": "# Agent Gestion des données de terrain\n\n- **Phase** : Avant-projet (AVP)\n- **Fiche source** : `refs/fiches_taches/2025-10-27-gestion-des-donnees-de-terrain.md`\n- **Priorité** : Haute\n- **Statut** : À lancer\n- **Responsable initial** : Responsable projet / Dev Python\n- **Fréquence** : À chaque nouveau plan\n- **Durée estimée** : 0.5 à 2h par tâche\n\n## Mission\n- **Objectif principal** : Analyser les altitudes, importer les levés, générer les profils en long et en travers.\n- **Déclencheurs connus** :\n  - Lancement d’un nouveau projet ou réception de données sources\n\n## Workflow cible\n1. Import de données topographiques (points, MNT)\n2. Génération automatique des profils\n3. Analyse des pentes et ruptures\n\n## Entrées à mobiliser\n- **Données** :\n  - Fichiers DWG / DXF\n  - Configuration charte / paramètres projet\n- **Documents de référence** :\n  - Charte graphique BE\n- **Logiciels / outils** :\n  - AutoCAD, Python, Librairie interne Projet R\n\n## Sorties attendues\n- **Livrables** :\n  - Profils au format PDF\n  - Données altimétriques structurées\n- **Formats** :\n  - DWG, PDF, Excel, JSON\n- **Destinataires / diffusion** :\n  - Équipe projet, archivage automatique\n\n## Points de douleur à traiter\n- Tâche répétitive et chronophage\n- Risque d’erreur humaine sur les noms/calques\n\n## Idées d'automatisation\n- **Pistes actuelles** :\n  - Script Python de renommage automatique\n  - Vérification par rapport à un fichier de référence\n- **Type envisagé** : Automatisation locale\n- **Pré-requis** : Plan DWG propre et configuration BE\n- **Niveau d'effort** : Moyen\n- **Bénéfices attendus** :\n  - Gain de temps\n  - Standardisation et fiabilité\n\n## Interactions et dépendances\n- Partage les levés avec l’agent SIG pour intégration géoréférencée.\n- Prépare les données pour l’agent Calculs VRD.\n\n## Questions ouvertes\n- Lister les formats fournis par les géomètres (CSV, DXF, LandXML).\n- Identifier les conversions nécessaires pour l’intégration SIG.\n\n## Actions prioritaires\n- Développement du module\n\n## Documents liés\n- config.json\n- charte_graphique.json\n"
  },
  {
    "slug": "gnration-automatise-des-notes-de-calcul-dassainissement-bassins-de-rtention-et-rseaux-ep",
    "title": "Génération automatisée des notes de calcul d’assainissement (bassins de rétention et réseaux EP)",
    "phase": "Avant-projet (AVP)",
    "priority": "Très haute.",
    "status": "À lancer.",
    "responsable": "Ingénieur hydrologue / Technicien VRD",
    "frequency": "À chaque projet comportant un réseau d’eaux pluviales",
    "duration": "4 à 6 heures sans automatisation",
    "source": "refs/fiches_taches/2025-10-25-gnration-automatise-des-notes-de-calcul-dassainissement-bassins-de-rtention-et-rseaux-ep.md",
    "body": "# Agent Génération automatisée des notes de calcul d’assainissement (bassins de rétention et réseaux EP)\n\n- **Phase** : Avant-projet (AVP)\n- **Fiche source** : `refs/fiches_taches/2025-10-25-gnration-automatise-des-notes-de-calcul-dassainissement-bassins-de-rtention-et-rseaux-ep.md`\n- **Priorité** : Très haute.\n- **Statut** : À lancer.\n- **Responsable initial** : Ingénieur hydrologue / Technicien VRD\n- **Fréquence** : À chaque projet comportant un réseau d’eaux pluviales\n- **Durée estimée** : 4 à 6 heures sans automatisation\n\n## Mission\n- **Objectif principal** : Établir les notes de calcul nécessaires à la justification hydraulique des ouvrages d’assainissement (dimensionnement des bassins, volumes de stockage, débit de fuite, diamètres de canalisations, etc.) selon les pluies de référence et les coefficients de ruissellement.\n- **Déclencheurs connus** :\n  - Après la définition du projet de nivellement et du zonage d’imperméabilisation.\n\n## Workflow cible\n1. Collecte des surfaces imperméabilisées par zone.\n2. Calcul des volumes ruisselés selon les pluies de projet (méthode rationnelle ou pluviogramme).\n3. Dimensionnement du bassin de rétention et calcul du débit de fuite (loi de Darcy-Weisbach ou orifice calibré).\n4. Vérification des vitesses d’écoulement dans le réseau et ajustement des diamètres.\n5. Rédaction et mise en page de la note de calcul dans un document Word ou PDF.\n\n## Entrées à mobiliser\n- **Données** :\n  - Surfaces imperméabilisées par zone (export AutoCAD/Covadis → Excel avec ID de tronçon).\n  - Pentes des collecteurs et longueurs (exports Covadis/Mensura structurés).\n  - Coefficients de ruissellement par type de surface (tableau de références interne ou veille web).\n  - Pluies décennales / centennales (coefficients de Montana ou données locales).\n- **Documents de référence** :\n  - Fascicule 70, DTU 60.11, arrêtés préfectoraux, règlement local d’assainissement.\n- **Logiciels / outils** :\n  - Excel, Covadis, AutoCAD, Word.\n\n## Sorties attendues\n- **Livrables** :\n  - Note de calcul hydraulique (modèle Excel → PDF).\n  - Schéma du réseau eaux pluviales annoté (AutoCAD/Covadis/Mensura).\n  - Tableau de synthèse des débits et volumes (export Excel).\n- **Formats** :\n  - PDF, DOCX, DWG.\n- **Destinataires / diffusion** :\n  - Maître d’ouvrage, service urbanisme, bureau de contrôle.\n\n## Points de douleur à traiter\n- Calculs manuels fastidieux et répétitifs entre Excel, Covadis et Word.\n- Risques d’erreurs lors de la mise à jour des surfaces ou coefficients.\n- Aucune traçabilité des hypothèses de calcul (version, pluie, coefficient).\n- Temps perdu à reformater les tableaux et schémas dans la note finale.\n\n## Idées d'automatisation\n- **Pistes actuelles** :\n  - Développer un module Python (AutoCAD + bibliothèque hydrologique) qui :\n  - extrait automatiquement les surfaces et pentes depuis le dessin,\n  - calcule les volumes de stockage et débits de fuite selon les paramètres hydrologiques,\n  - remplit un modèle Excel/Word pour produire la note de calcul et les tableaux.\n  - Mettre en place une bibliothèque de coefficients (ruissellement, pluies) centralisée pour alimenter les scripts.\n- **Type envisagé** : Python + modèle Word automatisé.\n- **Pré-requis** : Base de données des coefficients de ruissellement et pluies de référence.\n- **Niveau d'effort** : Élevé.\n- **Bénéfices attendus** :\n  - Réduction de 70 % du temps d’étude, standardisation des rendus, diminution des erreurs et justification technique automatique.\n\n## Interactions et dépendances\n- Travaille avec l’agent Calculs VRD pour consolider les données hydrauliques.\n- Consulte l’agent Normes & Conformité pour valider les hypothèses réglementaires.\n\n## Questions ouvertes\n- Confirmer les sources officielles des pluies de projet pour chaque territoire.\n- Définir le format cible des exports Covadis/Mensura (colonnes, identifiants).\n\n## Actions prioritaires\n- [ ] Recenser les formules et méthodes de calcul utilisées (documentation interne, Fascicule 70).\n- [ ] Créer un modèle Excel avec feuilles de saisie + export PDF automatique.\n- [ ] Tester un export Covadis → Excel contenant surfaces/pentes identifiées.\n\n## Documents liés\n- `refs/phases_taches.md#2-avant-projet-avp`\n- Modèle de note (à créer) — à lier dès disponibilité.\n"
  },
  {
    "slug": "integration-de-donnees-publiques",
    "title": "Intégration de données publiques",
    "phase": "Avant-projet (AVP)",
    "priority": "Haute",
    "status": "À lancer",
    "responsable": "Responsable projet / Dev Python",
    "frequency": "À chaque nouveau plan",
    "duration": "0.5 à 2h par tâche",
    "source": "refs/fiches_taches/2025-10-27-integration-de-donnees-publiques.md",
    "body": "# Agent Intégration de données publiques\n\n- **Phase** : Avant-projet (AVP)\n- **Fiche source** : `refs/fiches_taches/2025-10-27-integration-de-donnees-publiques.md`\n- **Priorité** : Haute\n- **Statut** : À lancer\n- **Responsable initial** : Responsable projet / Dev Python\n- **Fréquence** : À chaque nouveau plan\n- **Durée estimée** : 0.5 à 2h par tâche\n\n## Mission\n- **Objectif principal** : Importer automatiquement les données cadastrales, réseaux, PLU, etc. à partir de sources ouvertes.\n- **Déclencheurs connus** :\n  - Lancement d’un nouveau projet ou réception de données sources\n\n## Workflow cible\n1. Requête sur les sources disponibles (cadastre, data.gouv.fr, etc.)\n2. Téléchargement et formatage des données\n3. Injection dans le projet\n\n## Entrées à mobiliser\n- **Données** :\n  - Fichiers DWG / DXF\n  - Configuration charte / paramètres projet\n- **Documents de référence** :\n  - Charte graphique BE\n- **Logiciels / outils** :\n  - AutoCAD, Python, Librairie interne Projet R\n\n## Sorties attendues\n- **Livrables** :\n  - Fichiers SIG ou tabulaires\n  - Documentation associée\n- **Formats** :\n  - DWG, PDF, Excel, JSON\n- **Destinataires / diffusion** :\n  - Équipe projet, archivage automatique\n\n## Points de douleur à traiter\n- Tâche répétitive et chronophage\n- Risque d’erreur humaine sur les noms/calques\n\n## Idées d'automatisation\n- **Pistes actuelles** :\n  - Script Python de renommage automatique\n  - Vérification par rapport à un fichier de référence\n- **Type envisagé** : Automatisation locale\n- **Pré-requis** : Plan DWG propre et configuration BE\n- **Niveau d'effort** : Moyen\n- **Bénéfices attendus** :\n  - Gain de temps\n  - Standardisation et fiabilité\n\n## Interactions et dépendances\n- Alimente l’agent SIG en données réglementaires.\n- Informe l’agent Cahier des Charges des contraintes relevées.\n\n## Questions ouvertes\n- Établir la liste des APIs open data prioritaires.\n- Qualifier les licences et conditions d’utilisation.\n\n## Actions prioritaires\n- Développement du module\n\n## Documents liés\n- config.json\n- charte_graphique.json\n"
  },
  {
    "slug": "integration-sig",
    "title": "Intégration SIG",
    "phase": "AVP",
    "priority": "Haute",
    "status": "À lancer",
    "responsable": "Responsable projet / Dev Python",
    "frequency": "À chaque nouveau plan",
    "duration": "0.5 à 2h par tâche",
    "source": "refs/fiches_taches/2025-10-27-integration-sig.md",
    "body": "# Agent Intégration SIG\n\n- **Phase** : AVP\n- **Fiche source** : `refs/fiches_taches/2025-10-27-integration-sig.md`\n- **Priorité** : Haute\n- **Statut** : À lancer\n- **Responsable initial** : Responsable projet / Dev Python\n- **Fréquence** : À chaque nouveau plan\n- **Durée estimée** : 0.5 à 2h par tâche\n\n## Mission\n- **Objectif principal** : Utiliser les couches géographiques comme support d’analyse ou enrichissement du projet.\n- **Déclencheurs connus** :\n  - Lancement d’un nouveau projet ou réception de données sources\n\n## Workflow cible\n1. Chargement de couches SIG (shapefile, GeoJSON)\n2. Projection et calage spatial\n3. Croisement avec objets projet\n\n## Entrées à mobiliser\n- **Données** :\n  - Fichiers DWG / DXF\n  - Configuration charte / paramètres projet\n- **Documents de référence** :\n  - Charte graphique BE\n- **Logiciels / outils** :\n  - AutoCAD, Python, Librairie interne Projet R\n\n## Sorties attendues\n- **Livrables** :\n  - Fichiers SIG enrichis\n  - Cartes d’analyse\n- **Formats** :\n  - DWG, PDF, Excel, JSON\n- **Destinataires / diffusion** :\n  - Équipe projet, archivage automatique\n\n## Points de douleur à traiter\n- Tâche répétitive et chronophage\n- Risque d’erreur humaine sur les noms/calques\n\n## Idées d'automatisation\n- **Pistes actuelles** :\n  - Script Python de renommage automatique\n  - Vérification par rapport à un fichier de référence\n- **Type envisagé** : Automatisation locale\n- **Pré-requis** : Plan DWG propre et configuration BE\n- **Niveau d'effort** : Moyen\n- **Bénéfices attendus** :\n  - Gain de temps\n  - Standardisation et fiabilité\n\n## Interactions et dépendances\n- Importe les flux de l’agent Données Publiques.\n- Diffuse des couches à l’agent Coordination & Communication.\n\n## Questions ouvertes\n- Préciser les systèmes de coordonnées utilisés.\n- Déterminer les fréquences de mise à jour des fonds externes.\n\n## Actions prioritaires\n- Développement du module\n\n## Documents liés\n- config.json\n- charte_graphique.json\n"
  },
  {
    "slug": "mise-a-la-charte-graphique",
    "title": "Mise à la charte graphique",
    "phase": "Avant-projet (AVP)",
    "priority": "Haute",
    "status": "À lancer",
    "responsable": "Responsable projet / Dev Python",
    "frequency": "À chaque nouveau plan",
    "duration": "0.5 à 2h par tâche",
    "source": "refs/fiches_taches/2025-10-27-mise-a-la-charte-graphique.md",
    "body": "# Agent Mise à la charte graphique\n\n- **Phase** : Avant-projet (AVP)\n- **Fiche source** : `refs/fiches_taches/2025-10-27-mise-a-la-charte-graphique.md`\n- **Priorité** : Haute\n- **Statut** : À lancer\n- **Responsable initial** : Responsable projet / Dev Python\n- **Fréquence** : À chaque nouveau plan\n- **Durée estimée** : 0.5 à 2h par tâche\n\n## Mission\n- **Objectif principal** : Uniformiser les calques, appliquer les conventions BE, structurer le plan DWG.\n- **Déclencheurs connus** :\n  - Lancement d’un nouveau projet ou réception de données sources\n\n## Workflow cible\n1. Récupération du plan DWG brut\n2. Analyse des calques et objets\n3. Renommage automatique\n4. Application de la charte graphique définie\n\n## Entrées à mobiliser\n- **Données** :\n  - Fichiers DWG / DXF\n  - Configuration charte / paramètres projet\n- **Documents de référence** :\n  - Charte graphique BE\n- **Logiciels / outils** :\n  - AutoCAD, Python, Librairie interne Projet R\n\n## Sorties attendues\n- **Livrables** :\n  - Plan DWG mis à jour\n  - Rapport d’audit des calques (PDF/Excel)\n- **Formats** :\n  - DWG, PDF, Excel, JSON\n- **Destinataires / diffusion** :\n  - Équipe projet, archivage automatique\n\n## Points de douleur à traiter\n- Tâche répétitive et chronophage\n- Risque d’erreur humaine sur les noms/calques\n\n## Idées d'automatisation\n- **Pistes actuelles** :\n  - Script Python de renommage automatique\n  - Vérification par rapport à un fichier de référence\n- **Type envisagé** : Automatisation locale\n- **Pré-requis** : Plan DWG propre et configuration BE\n- **Niveau d'effort** : Moyen\n- **Bénéfices attendus** :\n  - Gain de temps\n  - Standardisation et fiabilité\n\n## Interactions et dépendances\n- Réutilise les données nettoyées par l’agent Données d’Entrées.\n- Informe l’agent Reporting & Livrables des écarts de charte.\n\n## Questions ouvertes\n- Rassembler les règles de charte graphique existantes.\n- Prioriser les contrôles automatiques vs check manuel.\n\n## Actions prioritaires\n- Développement du module\n\n## Documents liés\n- config.json\n- charte_graphique.json\n"
  },
  {
    "slug": "mise-au-norme-des-donnes-dentres",
    "title": "Mise au norme des données d'entrées",
    "phase": "AVP",
    "priority": "Haute",
    "status": "À lancer",
    "responsable": "blempy",
    "frequency": "À chaque projet",
    "duration": "6h",
    "source": "refs/fiches_taches/2025-10-27-mise-au-norme-des-donnes-dentres.md",
    "body": "# Agent Mise au norme des données d'entrées\n\n- **Phase** : AVP\n- **Fiche source** : `refs/fiches_taches/2025-10-27-mise-au-norme-des-donnes-dentres.md`\n- **Priorité** : Haute\n- **Statut** : À lancer\n- **Responsable initial** : blempy\n- **Fréquence** : À chaque projet\n- **Durée estimée** : 6h\n\n## Mission\n- **Objectif principal** : Centraliser et harmoniser tous les jeux de données d’entrée (plans DWG/DXF, levés géomètre, couches SIG) pour qu’ils respectent la charte BE et puissent alimenter les calculs hydrauliques ou VRD sans retraitement manuel.\n- **Déclencheurs connus** :\n  - Réception d’un dossier DWG/DXF provenant d’un partenaire (architecte, géomètre, concessionnaire).\n  - Lancement d’un nouveau projet nécessitant la constitution d’un socle terrain/métrés fiable.\n\n## Workflow cible\n1. Recenser les fichiers reçus (DWG/DXF, relevés, exports SIG) et inventorier les versions.\n2. Contrôler le système de coordonnées et reprojeter si besoin vers le référentiel projet.\n3. Appliquer la table de correspondance des calques / objets pour se conformer à la charte interne.\n4. Vérifier les attributs (unités, altimétrie, surfaces) et consigner les écarts dans un rapport QA.\n5. Livrer le « pack normalisé » (plans nettoyés + log des corrections) dans le dossier projet partagé.\n\n## Entrées à mobiliser\n- **Données** :\n  - Plans DWG/DXF bruts des partenaires.\n  - Levés topographiques / MNT fournis par le géomètre.\n  - Couches SIG d’environnement (cadastre, réseaux, zonages).\n  - Table de correspondance calques / objets (charte BE).\n- **Documents de référence** :\n  - Charte graphique et nomenclature des calques BE.\n  - Procédure interne de contrôle qualité (check-list Excel).\n  - Plan masse ou arrêté fixant le système de coordonnées du projet.\n- **Logiciels / outils** :\n  - AutoCAD / Covadis pour les opérations sur DWG/DXF.\n  - QGIS ou FME pour les conversions SIG.\n  - Scripts Python (pyautocad, ezdxf) pour l’automatisation.\n  - Tableur (Excel/LibreOffice) pour la check-list et le log d’anomalies.\n\n## Sorties attendues\n- **Livrables** :\n  - Dossier `02_Donnees_normalisees` avec les DWG/DXF nettoyés.\n  - Rapport de contrôle / log des modifications et incohérences.\n  - Check-list validée (coordonnées, calques, unités, attributs).\n- **Formats** :\n  - DWG/DXF nettoyés, SHP/GeoPackage reprojetés.\n  - CSV ou XLSX pour le log et la check-list.\n  - PDF de synthèse QA (facultatif pour diffusion externe).\n- **Destinataires / diffusion** :\n  - Équipe études VRD (agent Calculs VRD, agent Notes de calcul EP).\n  - Agent Charte Graphique pour contrôle visuel final.\n  - Stockage projet partagé (SharePoint, Nextcloud, Git LFS).\n\n## Points de douleur à traiter\n- Renommage manuel des calques et blocs pour chaque partenaire.\n- Incohérences de projection entraînant des décalages de plusieurs mètres.\n- Noms de fichiers / versions multiples sans traçabilité.\n- Manque de visibilité sur les corrections appliquées (pas de log standard).\n\n## Idées d'automatisation\n- **Pistes actuelles** :\n  - Script Python appliquant la table de correspondance calques/blocs et générant un fichier log.\n  - Modèle QGIS/FME pour reprojeter et découper les couches SIG au périmètre projet.\n  - Check-list automatisée (Excel + macros) qui valide unités, altitude, polylignes fermées, doublons.\n- **Type envisagé** : Automatisation locale (scripts Python + gabarits QGIS/Excel).\n- **Pré-requis** : Charte validée et table de correspondance à jour, arborescence projet standard, liste des EPSG autorisés.\n- **Niveau d'effort** : Moyen.\n- **Bénéfices attendus** :\n  - Réduction du temps de mise au propre (≈ -50 %).\n  - Fiabilité accrue des données d’entrée pour les calculs et exports.\n  - Traçabilité des corrections et des sources initiales.\n\n## Interactions et dépendances\n- Alimente l’agent Calculs VRD avec des fichiers homogènes.\n- Travaille avec l’agent SIG pour maintenir les projections cohérentes.\n- Coordonne les contrôles avec l’agent Charte Graphique (lint visuel).\n\n## Questions ouvertes\n- Recenser les jeux de données prioritaires à normaliser.\n- Valider les règles de nommage et calques par discipline.\n- Choisir le format du mapping (CSV, JSON) pour le script de renaming.\n\n## Actions prioritaires\n- Collecter les plans types récents et construire la table de correspondance calques/blocs.\n- Formaliser la check-list QC (coordonnées, unités, attributs obligatoires) dans un tableur partagé.\n- Prototyper le script Python d’automatisation (renommage + log) sur un jeu pilote.\n\n## Documents liés\n- `config/charte_graphique.json` (à compléter).\n- Check-list QA Excel (à créer).\n"
  },
  {
    "slug": "pilotage-a-distance-slack-webhook",
    "title": "Pilotage à distance / Slack / Webhook",
    "phase": "Support",
    "priority": "Haute",
    "status": "À lancer",
    "responsable": "Responsable projet / Dev Python",
    "frequency": "À chaque nouveau plan",
    "duration": "0.5 à 2h par tâche",
    "source": "refs/fiches_taches/2025-10-27-pilotage-a-distance-slack-webhook.md",
    "body": "# Agent Pilotage à distance / Slack / Webhook\n\n- **Phase** : Support\n- **Fiche source** : `refs/fiches_taches/2025-10-27-pilotage-a-distance-slack-webhook.md`\n- **Priorité** : Haute\n- **Statut** : À lancer\n- **Responsable initial** : Responsable projet / Dev Python\n- **Fréquence** : À chaque nouveau plan\n- **Durée estimée** : 0.5 à 2h par tâche\n\n## Mission\n- **Objectif principal** : Permettre le lancement de tâches ou l'interaction avec le système depuis l’extérieur (Slack, API, etc.).\n- **Déclencheurs connus** :\n  - Lancement d’un nouveau projet ou réception de données sources\n\n## Workflow cible\n1. Définition des commandes disponibles\n2. Connexion à Slack / interface webhook\n3. Traitement des commandes et retour utilisateur\n\n## Entrées à mobiliser\n- **Données** :\n  - Fichiers DWG / DXF\n  - Configuration charte / paramètres projet\n- **Documents de référence** :\n  - Charte graphique BE\n- **Logiciels / outils** :\n  - AutoCAD, Python, Librairie interne Projet R\n\n## Sorties attendues\n- **Livrables** :\n  - Interface webhook active\n  - Documentation des commandes\n- **Formats** :\n  - DWG, PDF, Excel, JSON\n- **Destinataires / diffusion** :\n  - Équipe projet, archivage automatique\n\n## Points de douleur à traiter\n- Tâche répétitive et chronophage\n- Risque d’erreur humaine sur les noms/calques\n\n## Idées d'automatisation\n- **Pistes actuelles** :\n  - Script Python de renommage automatique\n  - Vérification par rapport à un fichier de référence\n- **Type envisagé** : Automatisation locale\n- **Pré-requis** : Plan DWG propre et configuration BE\n- **Niveau d'effort** : Moyen\n- **Bénéfices attendus** :\n  - Gain de temps\n  - Standardisation et fiabilité\n\n## Interactions et dépendances\n- Diffuse les notifications émises par l’agent Coordination.\n- Peut lancer des workflows chez les agents spécialisés sur commande.\n\n## Questions ouvertes\n- Valider les espaces Slack / webhook disponibles.\n- Définir les actions à déclencher automatiquement depuis Slack.\n\n## Actions prioritaires\n- Développement du module\n\n## Documents liés\n- config.json\n- charte_graphique.json\n"
  },
  {
    "slug": "test-api-fiche",
    "title": "Test API fiche",
    "phase": "Avant-projet (AVP)",
    "priority": "Haute",
    "status": "À lancer",
    "responsable": "À préciser",
    "frequency": "À préciser",
    "duration": "À préciser",
    "source": "refs/fiches_taches/2025-10-27-test-api-fiche.md",
    "body": "# Agent Test API fiche\n\n- **Phase** : Avant-projet (AVP)\n- **Fiche source** : `refs/fiches_taches/2025-10-27-test-api-fiche.md`\n- **Priorité** : Haute\n- **Statut** : À lancer\n- **Responsable initial** : À préciser\n- **Fréquence** : À préciser\n- **Durée estimée** : À préciser\n\n## Mission\n- **Objectif principal** : Valider la création via API\n- **Déclencheurs connus** :\n  - À préciser\n\n## Workflow cible\n1. Étape 1\n2. Étape 2\n\n## Entrées à mobiliser\n- **Données** :\n  - À préciser\n- **Documents de référence** :\n  - À préciser\n- **Logiciels / outils** :\n  - À préciser\n\n## Sorties attendues\n- **Livrables** :\n  - À préciser\n- **Formats** :\n  - À préciser\n- **Destinataires / diffusion** :\n  - À préciser\n\n## Points de douleur à traiter\n- Pas assez de temps\n\n## Idées d'automatisation\n- **Pistes actuelles** :\n  - À préciser\n- **Type envisagé** : À qualifier\n- **Pré-requis** : À qualifier\n- **Niveau d'effort** : À qualifier\n- **Bénéfices attendus** :\n  - À préciser\n\n## Interactions et dépendances\n- Valide les endpoints gérés par l’agent Gestion de Projet & Versionning.\n- Remonte les anomalies à l’agent Coordination pour suivi.\n\n## Questions ouvertes\n- Lister les endpoints à tester en priorité.\n- Choisir les jeux de données d’essai (fichiers, payloads).\n\n## Actions prioritaires\n- À définir\n\n## Documents liés\n- À préciser\n"
  },
  {
    "slug": "verification-normative",
    "title": "Vérification normative",
    "phase": "Avant-projet (AVP)",
    "priority": "Haute",
    "status": "À lancer",
    "responsable": "Responsable projet / Dev Python",
    "frequency": "À chaque nouveau plan",
    "duration": "0.5 à 2h par tâche",
    "source": "refs/fiches_taches/2025-10-27-verification-normative.md",
    "body": "# Agent Vérification normative\n\n- **Phase** : Avant-projet (AVP)\n- **Fiche source** : `refs/fiches_taches/2025-10-27-verification-normative.md`\n- **Priorité** : Haute\n- **Statut** : À lancer\n- **Responsable initial** : Responsable projet / Dev Python\n- **Fréquence** : À chaque nouveau plan\n- **Durée estimée** : 0.5 à 2h par tâche\n\n## Mission\n- **Objectif principal** : Contrôler la conformité des plans et données avec les normes en vigueur (pentes minimales, accessibilité, etc.).\n- **Déclencheurs connus** :\n  - Lancement d’un nouveau projet ou réception de données sources\n\n## Workflow cible\n1. Analyse des objets selon leur usage (voirie, trottoir, accès PMR…)\n2. Application des seuils de conformité\n3. Signalement des non-conformités\n\n## Entrées à mobiliser\n- **Données** :\n  - Fichiers DWG / DXF\n  - Configuration charte / paramètres projet\n- **Documents de référence** :\n  - Charte graphique BE\n- **Logiciels / outils** :\n  - AutoCAD, Python, Librairie interne Projet R\n\n## Sorties attendues\n- **Livrables** :\n  - Rapport de conformité\n  - Fichier JSON des erreurs\n- **Formats** :\n  - DWG, PDF, Excel, JSON\n- **Destinataires / diffusion** :\n  - Équipe projet, archivage automatique\n\n## Points de douleur à traiter\n- Tâche répétitive et chronophage\n- Risque d’erreur humaine sur les noms/calques\n\n## Idées d'automatisation\n- **Pistes actuelles** :\n  - Script Python de renommage automatique\n  - Vérification par rapport à un fichier de référence\n- **Type envisagé** : Automatisation locale\n- **Pré-requis** : Plan DWG propre et configuration BE\n- **Niveau d'effort** : Moyen\n- **Bénéfices attendus** :\n  - Gain de temps\n  - Standardisation et fiabilité\n\n## Interactions et dépendances\n- Contrôle les livrables des agents Calculs VRD et Notes de calcul.\n- Retourne les écarts à l’agent Reporting & Livrables.\n\n## Questions ouvertes\n- Fournir la liste des normes et référentiels à intégrer.\n- Déterminer le format de rapport d’écart attendu.\n\n## Actions prioritaires\n- Développement du module\n\n## Documents liés\n- config.json\n- charte_graphique.json\n"
  }
]